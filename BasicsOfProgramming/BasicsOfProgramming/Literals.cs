using System;

namespace BasicsOfProgramming
{
    class Literals : MainClass
    {
        public void AboutLiterals()
        {
            Console.WriteLine("Литералы представляют неизменяемые значения(иногда их еще называют константами)");
            var explanation = @"
Литералы бывают логическими, целочисленными, вещественными, символьными и строчными.
И отдельный литерал представляет ключевое слово null.
";
            Console.WriteLine(explanation);
            Console.WriteLine("1. Логические литералы:");
            Console.WriteLine(true);
            Console.WriteLine(false);

            explanation = @"
Целочисленные литералы представляют положительные и отрицательные целые числа, например, 1, 2, 3, 4, -7, -109.
2. Целочисленные литералы могут быть выражены в десятичной, шестнадцатеричной и двоичной форме.
";
            Console.WriteLine(explanation);

            Console.WriteLine("2.1. Десятеричная форма (-11):");
            Console.WriteLine(-11);
            Console.WriteLine("2.2. Двоичная форма (0b11):");
            Console.WriteLine(0b11);
            Console.WriteLine("2.3. Шеснадцатеричная форма (0x0A):");
            Console.WriteLine(0x0A);

            Console.WriteLine("3. Вещественные литералы:");
            Console.WriteLine("Вещественные литералы представляют вещественные числа");
            Console.WriteLine("3.1. Первая форма - вещественные числа с фиксированной запятой, при которой дробную часть отделяется от целой части точкой");
            Console.WriteLine(3.14);
            Console.WriteLine("3.2. Также вещественные литералы могут определяться в экспоненциальной форме MEp, где M — мантисса, E - экспонента, которая фактически означает \" * 10 ^ \" (умножить на десять в степени), а p — порядок");
            Console.WriteLine("3.2e3 - по сути равно 3.2 * 10 * 10 * 10 = 3200");
            Console.WriteLine(3.2e3);

            Console.WriteLine("4. Символьные литералы:");
            Console.WriteLine("4.1. Символьные литералы бывают нескольких видов. Прежде всего это обычные символы: '2'");
            Console.WriteLine('2');
            Console.WriteLine("4.2.1. Специальную группу представляют управляющие последовательности (escape sequence). Управляющая последовательность представляет символ, перед которым ставится обратный слэш. Наиболее часто используемые последовательности: '\\n'- перевод строки, '\\t' - табуляция, '\\' - обратный слэш");
            Console.WriteLine("4.2.2. Еще один способ определения символов представляет использования шестнадцатеричных кодов ASCII");
            Console.WriteLine("Для этого в одинарных кавычках указываются символы '\\x', после которых идет шестнадцатеричный код символа из таблицы ASCII");
            Console.WriteLine("Коды символов из таблицы ASCII можно посмотреть в http://www.asciitable.com/");
            Console.WriteLine("\\x78 = " + '\x78');
            Console.WriteLine("4.2.3. И последнийй способ определения символьных литералов представляет применение кодов из таблицы Unicode");
            Console.WriteLine("https://unicode-table.com/ru/");
            Console.WriteLine("\\u0420 = " + '\u0420' );

            Console.WriteLine("5. Строковые литералы:");
            Console.WriteLine("Строковые литералы представляют строки");
            Console.WriteLine("Jello");
            Console.WriteLine("Если внутри строки необходимо вывести двойную ковычку, то такая внутренняя кавычка преваряется обратным слешем");
            Console.WriteLine("Компания \"Рога и копыта\"");
            Console.WriteLine("Так же в строках можно использовать управляющие последовательности. Например, последовательность '\\n' осуществляет перевод на новую строку:");
            Console.WriteLine("Привет \nмир");

            Console.WriteLine("6. null");
            Console.WriteLine("null представляет ссылку которая указывает ни на какой объект. То есть по сути отсутсвие значения");
        }
    }
}
